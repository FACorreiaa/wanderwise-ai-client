syntax = "proto3";

package ai_poi.poi.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/FACorreiaa/loci-proto/proto/poi/v1";

// POIService provides points of interest discovery and management
service POIService {
  // Get POIs by city
  rpc GetPOIsByCity(GetPOIsByCityRequest) returns (GetPOIsByCityResponse);
  rpc SearchPOIs(SearchPOIsRequest) returns (SearchPOIsResponse);
  rpc SearchPOIsSemantic(SearchPOIsSemanticRequest) returns (SearchPOIsSemanticResponse);
  rpc SearchPOIsSemanticByCity(SearchPOIsSemanticByCityRequest) returns (SearchPOIsSemanticResponse);
  rpc SearchPOIsHybrid(SearchPOIsHybridRequest) returns (SearchPOIsHybridResponse);

  // Get nearby recommendations
  rpc GetNearbyRecommendations(GetNearbyRecommendationsRequest) returns (GetNearbyRecommendationsResponse);

  // Domain-specific discovery endpoints
  rpc DiscoverRestaurants(DiscoverRestaurantsRequest) returns (DiscoverRestaurantsResponse);
  rpc DiscoverActivities(DiscoverActivitiesRequest) returns (DiscoverActivitiesResponse);
  rpc DiscoverHotels(DiscoverHotelsRequest) returns (DiscoverHotelsResponse);
  rpc DiscoverAttractions(DiscoverAttractionsRequest) returns (DiscoverAttractionsResponse);

  // Favorites management
  rpc AddToFavorites(AddToFavoritesRequest) returns (AddToFavoritesResponse);
  rpc RemoveFromFavorites(RemoveFromFavoritesRequest) returns (RemoveFromFavoritesResponse);
  rpc GetFavorites(GetFavoritesRequest) returns (GetFavoritesResponse);

  // Itinerary management
  rpc GetItineraries(GetItinerariesRequest) returns (GetItinerariesResponse);
  rpc GetItinerary(GetItineraryRequest) returns (GetItineraryResponse);
  rpc UpdateItinerary(UpdateItineraryRequest) returns (UpdateItineraryResponse);

  // Generate embeddings for POIs (admin)
  rpc GenerateEmbeddings(GenerateEmbeddingsRequest) returns (GenerateEmbeddingsResponse);
}

// Core POI entity
message POIDetailedInfo {
  string id = 1;
  string name = 2;
  double latitude = 3;
  double longitude = 4;
  string category = 5;
  string subcategory = 6;
  string description = 7;
  double rating = 8;
  int32 review_count = 9;
  string price_range = 10; // Free, €, €€, €€€
  string address = 11;
  string phone = 12;
  string email = 13;
  string website = 14;
  repeated string opening_hours = 15;
  repeated string photos = 16;
  repeated string amenities = 17;
  string distance = 18; // Distance from search point
  string city_id = 19;
  string city_name = 20;
  string country = 21;
  bool is_verified = 22;
  map<string, string> metadata = 23;
  google.protobuf.Timestamp created_at = 24;
  google.protobuf.Timestamp updated_at = 25;
  repeated Tags tags = 26;
  string phone_number = 27;
  string price_level = 28;
  string source = 29;
}

// Restaurant-specific information
message RestaurantDetailedInfo {
  POIDetailedInfo poi = 1;
  string cuisine_type = 2;
  repeated string dietary_options = 3;
  string dress_code = 4;
  bool reservations_required = 5;
  string average_meal_duration = 6;
  repeated string specialties = 7;
}

// Hotel-specific information
message HotelDetailedInfo {
  POIDetailedInfo poi = 1;
  int32 star_rating = 2;
  repeated string room_types = 3;
  repeated string amenities = 4;
  string check_in_time = 5;
  string check_out_time = 6;
  bool pet_friendly = 7;
  bool parking_available = 8;
  string property_type = 9; // Hotel, B&B, Hostel, etc.
}

// Geographic point
message GeoPoint {
  double latitude = 1;
  double longitude = 2;
  double limit = 3;
}

// Search filters
message POIFilter {
  string query = 1;
  GeoPoint location = 2;
  double radius_meters = 3;
  repeated string categories = 4;
  repeated string price_ranges = 5;
  double min_rating = 6;
  string sort_by = 7; // "rating", "distance", "popularity", "price"
  string sort_order = 8; // "asc", "desc"
  int32 limit = 9;
  int32 offset = 10;
  string city_id = 11;
}

// Request/Response messages
message GetPOIsByCityRequest {
  string city_id = 1;
  int32 limit = 2;
  int32 offset = 3;
  BaseRequest request = 100;
}

message GetPOIsByCityResponse {
  repeated POIDetailedInfo pois = 1;
  int32 total_count = 2;
  BaseResponse response = 100;
}

message SearchPOIsRequest {
  POIFilter filter = 1;
  BaseRequest request = 100;
}

message SearchPOIsResponse {
  repeated POIDetailedInfo pois = 1;
  int32 total_count = 2;
  SearchMetadata metadata = 3;
  BaseResponse response = 100;
}

message SearchPOIsSemanticRequest {
  string query = 1;
  GeoPoint location = 2;
  int32 limit = 3;
  double semantic_threshold = 4;
  BaseRequest request = 100;
}

message SearchPOIsSemanticByCityRequest {
  string query = 1;
  string city_id = 2;
  int32 limit = 3;
  double semantic_threshold = 4;
  BaseRequest request = 100;
}

message SearchPOIsSemanticResponse {
  repeated POISemanticMatch pois = 1;
  int32 total_count = 2;
  SearchMetadata metadata = 3;
  BaseResponse response = 100;
}

message POISemanticMatch {
  POIDetailedInfo poi = 1;
  double similarity_score = 2;
  string match_reason = 3;
}

message SearchPOIsHybridRequest {
  POIFilter filter = 1;
  string semantic_query = 2;
  double semantic_weight = 3; // 0.0-1.0, weight between spatial and semantic
  BaseRequest request = 100;
}

message SearchPOIsHybridResponse {
  repeated POIHybridMatch pois = 1;
  int32 total_count = 2;
  SearchMetadata metadata = 3;
  BaseResponse response = 100;
}

message POIHybridMatch {
  POIDetailedInfo poi = 1;
  double spatial_score = 2;
  double semantic_score = 3;
  double combined_score = 4;
}

message SearchMetadata {
  double query_time_ms = 1;
  string search_method = 2;
  map<string, string> debug_info = 3;
}

// Nearby recommendations
message GetNearbyRecommendationsRequest {
  GeoPoint location = 1;
  double radius_meters = 2;
  string user_id = 3; // For personalized recommendations
  repeated string preferred_categories = 4;
  int32 limit = 5;
  BaseRequest request = 100;
}

message GetNearbyRecommendationsResponse {
  repeated POIRecommendation recommendations = 1;
  RecommendationMetadata metadata = 2;
  BaseResponse response = 100;
}

message POIRecommendation {
  POIDetailedInfo poi = 1;
  double recommendation_score = 2;
  string recommendation_reason = 3;
  repeated string tags = 4;
}

message RecommendationMetadata {
  string personalization_level = 1;
  repeated string applied_filters = 2;
}

// Domain-specific discovery
message DiscoverRestaurantsRequest {
  GeoPoint location = 1;
  double radius_meters = 2;
  repeated string cuisine_types = 3;
  repeated string price_ranges = 4;
  double min_rating = 5;
  int32 limit = 6;
  BaseRequest request = 100;
}

message DiscoverRestaurantsResponse {
  repeated RestaurantDetailedInfo restaurants = 1;
  int32 total_count = 2;
  BaseResponse response = 100;
}

message DiscoverActivitiesRequest {
  GeoPoint location = 1;
  double radius_meters = 2;
  repeated string activity_types = 3;
  int32 limit = 4;
  string duration = 5;
  BaseRequest request = 100;
}

message DiscoverActivitiesResponse {
  repeated POIDetailedInfo activities = 1;
  int32 total_count = 2;
  BaseResponse response = 100;
}

message DiscoverHotelsRequest {
  GeoPoint location = 1;
  double radius_meters = 2;
  repeated string property_types = 3;
  repeated int32 star_ratings = 4;
  repeated string price_ranges = 5;
  int32 limit = 6;
  BaseRequest request = 100;
}

message DiscoverHotelsResponse {
  repeated HotelDetailedInfo hotels = 1;
  int32 total_count = 2;
  BaseResponse response = 100;
}

message DiscoverAttractionsRequest {
  GeoPoint location = 1;
  double radius_meters = 2;
  repeated string attraction_types = 3;
  int32 limit = 4;

  BaseRequest request = 100;
}

message DiscoverAttractionsResponse {
  repeated POIDetailedInfo attractions = 1;
  int32 total_count = 2;
  BaseResponse response = 100;
}

// Favorites management
message AddToFavoritesRequest {
  string user_id = 1;
  string poi_id = 2;
  bool is_llm_poi = 3;
  POIDetailedInfo poi_data = 4; // For LLM-generated POIs
  BaseRequest request = 100;
}

message AddToFavoritesResponse {
  bool success = 1;
  string message = 2;
  string poi_id = 3; // Actual POI ID after processing
  string favorite_id = 4;
  BaseResponse response = 100;
}

message RemoveFromFavoritesRequest {
  string user_id = 1;
  string poi_id = 2;
  bool is_llm_poi = 3;
  POIDetailedInfo poi_data = 4;
  BaseRequest request = 100;
}

message RemoveFromFavoritesResponse {
  bool success = 1;
  string message = 2;
  string poi_id = 3;
  BaseResponse response = 100;
}

message GetFavoritesRequest {
  string user_id = 1;
  int32 page = 2;
  int32 page_size = 3;
  int32 limit = 4;
  int32 offset = 5;
  BaseRequest request = 100;
}

message GetFavoritesResponse {
  repeated POIDetailedInfo favorites = 1;
  int32 total_count = 2;
  int32 current_page = 3;
  int32 total_pages = 4;
  int32 limit = 5;
  int32 offset = 6;
  BaseResponse response = 100;
}

// Itinerary management
message GetItinerariesRequest {
  string user_id = 1;
  int32 limit = 2;
  int32 offset = 3;
  int32 page = 4;
  int32 page_size = 5;
  BaseRequest request = 100;
}

message GetItinerariesResponse {
  repeated UserItinerary itineraries = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
  BaseResponse response = 100;
}

message GetItineraryRequest {
  string user_id = 1;
  string itinerary_id = 2;
  BaseRequest request = 100;
}

message GetItineraryResponse {
  UserItinerary itinerary = 1;
  BaseResponse response = 100;
}

message UpdateItineraryRequest {
  string user_id = 1;
  string itinerary_id = 2;
  string title = 3;
  string description = 4;
  string markdown_content = 5;
  BaseRequest request = 100;
}

message UpdateItineraryResponse {
  bool success = 1;
  string message = 2;
  UserItinerary itinerary = 3;
  BaseResponse response = 100;
}

message UserItinerary {
  string id = 1;
  string user_id = 2;
  string session_id = 3;
  string title = 4;
  string description = 5;
  string markdown_content = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  repeated Tags tags = 9;
  string estimated_repeated_days  = 10;
  int32 estimated_cost_level_11 = 11;
  bool is_public = 12;
}

message Tags {
  string id = 1;
  string user_id = 2;
  string name = 3;
  string tag_type = 4;
  string description = 5;
  string source = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

// Embeddings generation (admin)
message GenerateEmbeddingsRequest {
  int32 batch_size = 1;
  bool force_regenerate = 2;
  BaseRequest request = 100;
}

message GenerateEmbeddingsResponse {
  int32 processed_count = 1;
  int32 updated_count = 2;
  string status = 3;
  repeated string errors = 4;
  string message = 5;
  bool success = 6;
  BaseResponse response = 100;
}

message BaseRequest {
  string downstream = 998;
  string request_id = 999;
}

message BaseResponse {
  string upstream = 998;
  string request_id = 999;
  string status = 1000;
}
