syntax = "proto3";

package ai_poi.review.v1;

import "common.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/facorreiaa/go-ai-poi-server/proto/review/v1";

// ReviewService provides review and rating functionality for POIs
service ReviewService {
  rpc CreateReview(CreateReviewRequest) returns (CreateReviewResponse);
  rpc GetPOIReviews(GetPOIReviewsRequest) returns (GetPOIReviewsResponse);
  rpc GetReview(GetReviewRequest) returns (GetReviewResponse);
  rpc UpdateReview(UpdateReviewRequest) returns (UpdateReviewResponse);
  rpc DeleteReview(DeleteReviewRequest) returns (DeleteReviewResponse);
  rpc GetUserReviews(GetUserReviewsRequest) returns (GetUserReviewsResponse);
  rpc LikeReview(LikeReviewRequest) returns (LikeReviewResponse);

  // Report a review
  rpc ReportReview(ReportReviewRequest) returns (ReportReviewResponse);

  // Get review statistics for a POI
  rpc GetReviewStatistics(GetReviewStatisticsRequest) returns (GetReviewStatisticsResponse);
}

// Core review entity
message Review {
  string id = 1;
  string user_id = 2;
  string poi_id = 3;
  double rating = 4; // 1.0 - 5.0
  string title = 5;
  string content = 6;
  repeated string photos = 7; // Photo URLs
  ReviewStatus status = 8;
  google.protobuf.Timestamp visit_date = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;

  // Review metadata
  int32 helpful_count = 12; // Number of helpful votes
  int32 report_count = 13; // Number of reports
  bool is_verified = 14; // Verified reviewer
  string language = 15; // ISO 639-1 language code

  // Review aspects (detailed ratings)
  ReviewAspects aspects = 16;

  // User information (public)
  ReviewerInfo reviewer = 17;

  // Response from business owner
  BusinessResponse business_response = 18;
}

// Review status
enum ReviewStatus {
  REVIEW_STATUS_UNSPECIFIED = 0;
  REVIEW_STATUS_PENDING = 1; // Awaiting moderation
  REVIEW_STATUS_PUBLISHED = 2; // Live and visible
  REVIEW_STATUS_HIDDEN = 3; // Hidden by moderator
  REVIEW_STATUS_DELETED = 4; // Deleted by user or admin
  REVIEW_STATUS_FLAGGED = 5; // Flagged for review
}

// Detailed aspects of a review
message ReviewAspects {
  double service_rating = 1; // 1.0 - 5.0
  double quality_rating = 2;
  double value_rating = 3;
  double atmosphere_rating = 4;
  double cleanliness_rating = 5;
  double location_rating = 6;

  // Restaurant-specific
  double food_rating = 7;

  // Hotel-specific
  double room_rating = 8;
  double amenities_rating = 9;
  double staff_rating = 10;
}

// Public reviewer information
message ReviewerInfo {
  string user_id = 1;
  string display_name = 2;
  string avatar_url = 3;
  int32 review_count = 4;
  bool is_verified = 5;
  string level = 6; // "Bronze", "Silver", "Gold", "Platinum"
  google.protobuf.Timestamp member_since = 7;
}

// Business response to a review
message BusinessResponse {
  string id = 1;
  string business_user_id = 2;
  string content = 3;
  google.protobuf.Timestamp created_at = 4;
  string responder_name = 5;
  string responder_title = 6;
}

// Review statistics for a POI
message ReviewStatistics {
  string poi_id = 1;
  double overall_rating = 2;
  int32 total_reviews = 3;
  ai_poi.common.v1.RatingBreakdown rating_breakdown = 4;
  ReviewAspectAverages aspect_averages = 5;
  RecentReviewTrends trends = 6;
  repeated ReviewTag tags = 7; // Most mentioned tags/keywords
  LanguageDistribution language_distribution = 8;
  google.protobuf.Timestamp last_updated = 9;
}

// Average ratings for review aspects
message ReviewAspectAverages {
  double service_average = 1;
  double quality_average = 2;
  double value_average = 3;
  double atmosphere_average = 4;
  double cleanliness_average = 5;
  double location_average = 6;
  double food_average = 7;
  double room_average = 8;
  double amenities_average = 9;
  double staff_average = 10;
}

// Review trends over time
message RecentReviewTrends {
  double rating_trend = 1; // Positive/negative trend
  int32 reviews_last_30_days = 2;
  double average_rating_last_30_days = 3;
  double rating_change_percentage = 4;
  repeated MonthlyReviewData monthly_data = 5;
}

message MonthlyReviewData {
  int32 year = 1;
  int32 month = 2;
  int32 review_count = 3;
  double average_rating = 4;
}

// Review tags/keywords
message ReviewTag {
  string tag = 1;
  int32 count = 2;
  double sentiment_score = 3; // -1.0 to 1.0
  string category = 4; // "positive", "negative", "neutral"
}

// Language distribution of reviews
message LanguageDistribution {
  repeated LanguageCount languages = 1;
}

message LanguageCount {
  string language_code = 1;
  string language_name = 2;
  int32 count = 3;
  double percentage = 4;
}

// Review filter options
message ReviewFilter {
  repeated double rating_filters = 1; // Filter by specific ratings
  google.protobuf.Timestamp start_date = 2;
  google.protobuf.Timestamp end_date = 3;
  repeated string languages = 4;
  bool verified_only = 5;
  bool with_photos_only = 6;
  repeated string keywords = 7;
  ReviewSortBy sort_by = 8;
  ai_poi.common.v1.SortDirection sort_direction = 9;
}

// Sort options for reviews
enum ReviewSortBy {
  REVIEW_SORT_BY_UNSPECIFIED = 0;
  REVIEW_SORT_BY_DATE = 1; // Most recent first
  REVIEW_SORT_BY_RATING = 2; // Highest rating first
  REVIEW_SORT_BY_HELPFUL = 3; // Most helpful first
  REVIEW_SORT_BY_RELEVANCE = 4; // Algorithm-determined relevance
}

// Request/Response messages
message CreateReviewRequest {
  string user_id = 1;
  string poi_id = 2;
  double rating = 3;
  string title = 4;
  string content = 5;
  repeated string photo_urls = 6;
  google.protobuf.Timestamp visit_date = 7;
  ReviewAspects aspects = 8;
  string language = 9;
  BaseRequest request = 100;
}

message CreateReviewResponse {
  ai_poi.common.v1.Response response = 1;
  Review review = 2;
  BaseResponse base_response = 100;
}

message GetPOIReviewsRequest {
  string poi_id = 1;
  ai_poi.common.v1.PaginationRequest pagination = 2;
  ReviewFilter filter = 3;
  BaseRequest request = 100;
}

message GetPOIReviewsResponse {
  repeated Review reviews = 1;
  ai_poi.common.v1.PaginationResponse pagination = 2;
  ReviewStatistics statistics = 3;
  BaseResponse response = 100;
}

message GetReviewRequest {
  string review_id = 1;
  string user_id = 2; // Optional, for permission checking
  BaseRequest request = 100;
}

message GetReviewResponse {
  Review review = 1;
  bool can_edit = 2;
  bool can_delete = 3;
  BaseResponse response = 100;
}

message UpdateReviewRequest {
  string user_id = 1;
  string review_id = 2;
  double rating = 3;
  string title = 4;
  string content = 5;
  repeated string photo_urls = 6;
  google.protobuf.Timestamp visit_date = 7;
  ReviewAspects aspects = 8;
  BaseRequest request = 100;
}

message UpdateReviewResponse {
  ai_poi.common.v1.Response response = 1;
  Review review = 2;
  BaseResponse base_response = 100;
}

message DeleteReviewRequest {
  string user_id = 1;
  string review_id = 2;
  BaseRequest request = 100;
}

message DeleteReviewResponse {
  ai_poi.common.v1.Response response = 1;
  BaseResponse base_response = 100;
}

message GetUserReviewsRequest {
  string user_id = 1;
  ai_poi.common.v1.PaginationRequest pagination = 2;
  ReviewFilter filter = 3;
  BaseRequest request = 100;
}

message GetUserReviewsResponse {
  repeated Review reviews = 1;
  ai_poi.common.v1.PaginationResponse pagination = 2;
  UserReviewStatistics statistics = 3;
  BaseResponse response = 100;
}

message UserReviewStatistics {
  int32 total_reviews = 1;
  double average_rating_given = 2;
  int32 helpful_votes_received = 3;
  string reviewer_level = 4;
  repeated string top_categories_reviewed = 5;
}

message LikeReviewRequest {
  string user_id = 1;
  string review_id = 2;
  bool is_like = 3; // true for like, false for unlike
  BaseRequest request = 100;
}

message LikeReviewResponse {
  ai_poi.common.v1.Response response = 1;
  int32 new_helpful_count = 2;
  BaseResponse base_response = 100;
}

message ReportReviewRequest {
  string user_id = 1;
  string review_id = 2;
  string reason = 3; // "spam", "inappropriate", "fake", "offensive"
  string details = 4;
  BaseRequest request = 100;
}

message ReportReviewResponse {
  ai_poi.common.v1.Response response = 1;
  BaseResponse base_response = 100;
}

message GetReviewStatisticsRequest {
  string poi_id = 1;
  bool include_trends = 2;
  bool include_tags = 3;
  BaseRequest request = 100;
}

message GetReviewStatisticsResponse {
  ReviewStatistics statistics = 1;
  BaseResponse response = 100;
}

message BaseRequest {
  string downstream = 998;
  string request_id = 999;
}

message BaseResponse {
  string upstream = 998;
  string request_id = 999;
  string status = 1000;
}
