/**
 * @fileoverview gRPC-Web generated client stub for ai_poi.auth.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.32.0
// source: auth.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as auth_pb from './auth_pb.d'; // proto import: "auth.proto"


export class AuthServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRegister = new grpcWeb.MethodDescriptor(
    '/ai_poi.auth.v1.AuthService/Register',
    grpcWeb.MethodType.UNARY,
    auth_pb.RegisterRequest,
    auth_pb.RegisterResponse,
    (request: auth_pb.RegisterRequest) => {
      return request.serializeBinary();
    },
    auth_pb.RegisterResponse.deserializeBinary
  );

  register(
    request: auth_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.RegisterResponse>;

  register(
    request: auth_pb.RegisterRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.RegisterResponse) => void): grpcWeb.ClientReadableStream<auth_pb.RegisterResponse>;

  register(
    request: auth_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.RegisterResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ai_poi.auth.v1.AuthService/Register',
        request,
        metadata || {},
        this.methodDescriptorRegister,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ai_poi.auth.v1.AuthService/Register',
    request,
    metadata || {},
    this.methodDescriptorRegister);
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/ai_poi.auth.v1.AuthService/Login',
    grpcWeb.MethodType.UNARY,
    auth_pb.LoginRequest,
    auth_pb.LoginResponse,
    (request: auth_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    auth_pb.LoginResponse.deserializeBinary
  );

  login(
    request: auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.LoginResponse>;

  login(
    request: auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<auth_pb.LoginResponse>;

  login(
    request: auth_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ai_poi.auth.v1.AuthService/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ai_poi.auth.v1.AuthService/Login',
    request,
    metadata || {},
    this.methodDescriptorLogin);
  }

  methodDescriptorRefreshToken = new grpcWeb.MethodDescriptor(
    '/ai_poi.auth.v1.AuthService/RefreshToken',
    grpcWeb.MethodType.UNARY,
    auth_pb.RefreshTokenRequest,
    auth_pb.TokenResponse,
    (request: auth_pb.RefreshTokenRequest) => {
      return request.serializeBinary();
    },
    auth_pb.TokenResponse.deserializeBinary
  );

  refreshToken(
    request: auth_pb.RefreshTokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.TokenResponse>;

  refreshToken(
    request: auth_pb.RefreshTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.TokenResponse) => void): grpcWeb.ClientReadableStream<auth_pb.TokenResponse>;

  refreshToken(
    request: auth_pb.RefreshTokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.TokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ai_poi.auth.v1.AuthService/RefreshToken',
        request,
        metadata || {},
        this.methodDescriptorRefreshToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ai_poi.auth.v1.AuthService/RefreshToken',
    request,
    metadata || {},
    this.methodDescriptorRefreshToken);
  }

  methodDescriptorLogout = new grpcWeb.MethodDescriptor(
    '/ai_poi.auth.v1.AuthService/Logout',
    grpcWeb.MethodType.UNARY,
    auth_pb.LogoutRequest,
    auth_pb.LogoutResponse,
    (request: auth_pb.LogoutRequest) => {
      return request.serializeBinary();
    },
    auth_pb.LogoutResponse.deserializeBinary
  );

  logout(
    request: auth_pb.LogoutRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.LogoutResponse>;

  logout(
    request: auth_pb.LogoutRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.LogoutResponse) => void): grpcWeb.ClientReadableStream<auth_pb.LogoutResponse>;

  logout(
    request: auth_pb.LogoutRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.LogoutResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ai_poi.auth.v1.AuthService/Logout',
        request,
        metadata || {},
        this.methodDescriptorLogout,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ai_poi.auth.v1.AuthService/Logout',
    request,
    metadata || {},
    this.methodDescriptorLogout);
  }

  methodDescriptorValidateSession = new grpcWeb.MethodDescriptor(
    '/ai_poi.auth.v1.AuthService/ValidateSession',
    grpcWeb.MethodType.UNARY,
    auth_pb.ValidateSessionRequest,
    auth_pb.ValidateSessionResponse,
    (request: auth_pb.ValidateSessionRequest) => {
      return request.serializeBinary();
    },
    auth_pb.ValidateSessionResponse.deserializeBinary
  );

  validateSession(
    request: auth_pb.ValidateSessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.ValidateSessionResponse>;

  validateSession(
    request: auth_pb.ValidateSessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.ValidateSessionResponse) => void): grpcWeb.ClientReadableStream<auth_pb.ValidateSessionResponse>;

  validateSession(
    request: auth_pb.ValidateSessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.ValidateSessionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ai_poi.auth.v1.AuthService/ValidateSession',
        request,
        metadata || {},
        this.methodDescriptorValidateSession,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ai_poi.auth.v1.AuthService/ValidateSession',
    request,
    metadata || {},
    this.methodDescriptorValidateSession);
  }

  methodDescriptorUpdatePassword = new grpcWeb.MethodDescriptor(
    '/ai_poi.auth.v1.AuthService/UpdatePassword',
    grpcWeb.MethodType.UNARY,
    auth_pb.UpdatePasswordRequest,
    auth_pb.UpdatePasswordResponse,
    (request: auth_pb.UpdatePasswordRequest) => {
      return request.serializeBinary();
    },
    auth_pb.UpdatePasswordResponse.deserializeBinary
  );

  updatePassword(
    request: auth_pb.UpdatePasswordRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.UpdatePasswordResponse>;

  updatePassword(
    request: auth_pb.UpdatePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.UpdatePasswordResponse) => void): grpcWeb.ClientReadableStream<auth_pb.UpdatePasswordResponse>;

  updatePassword(
    request: auth_pb.UpdatePasswordRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.UpdatePasswordResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ai_poi.auth.v1.AuthService/UpdatePassword',
        request,
        metadata || {},
        this.methodDescriptorUpdatePassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ai_poi.auth.v1.AuthService/UpdatePassword',
    request,
    metadata || {},
    this.methodDescriptorUpdatePassword);
  }

  methodDescriptorGoogleLogin = new grpcWeb.MethodDescriptor(
    '/ai_poi.auth.v1.AuthService/GoogleLogin',
    grpcWeb.MethodType.UNARY,
    auth_pb.GoogleLoginRequest,
    auth_pb.GoogleLoginResponse,
    (request: auth_pb.GoogleLoginRequest) => {
      return request.serializeBinary();
    },
    auth_pb.GoogleLoginResponse.deserializeBinary
  );

  googleLogin(
    request: auth_pb.GoogleLoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.GoogleLoginResponse>;

  googleLogin(
    request: auth_pb.GoogleLoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.GoogleLoginResponse) => void): grpcWeb.ClientReadableStream<auth_pb.GoogleLoginResponse>;

  googleLogin(
    request: auth_pb.GoogleLoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.GoogleLoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ai_poi.auth.v1.AuthService/GoogleLogin',
        request,
        metadata || {},
        this.methodDescriptorGoogleLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ai_poi.auth.v1.AuthService/GoogleLogin',
    request,
    metadata || {},
    this.methodDescriptorGoogleLogin);
  }

  methodDescriptorGoogleCallback = new grpcWeb.MethodDescriptor(
    '/ai_poi.auth.v1.AuthService/GoogleCallback',
    grpcWeb.MethodType.UNARY,
    auth_pb.GoogleCallbackRequest,
    auth_pb.LoginResponse,
    (request: auth_pb.GoogleCallbackRequest) => {
      return request.serializeBinary();
    },
    auth_pb.LoginResponse.deserializeBinary
  );

  googleCallback(
    request: auth_pb.GoogleCallbackRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.LoginResponse>;

  googleCallback(
    request: auth_pb.GoogleCallbackRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<auth_pb.LoginResponse>;

  googleCallback(
    request: auth_pb.GoogleCallbackRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.LoginResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ai_poi.auth.v1.AuthService/GoogleCallback',
        request,
        metadata || {},
        this.methodDescriptorGoogleCallback,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ai_poi.auth.v1.AuthService/GoogleCallback',
    request,
    metadata || {},
    this.methodDescriptorGoogleCallback);
  }

}

